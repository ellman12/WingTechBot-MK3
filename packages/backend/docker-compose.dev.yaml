version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=wingtechbot
      - POSTGRES_USER=wingtechbot
      - POSTGRES_PASSWORD=wingtechbot_password
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wingtechbot -d wingtechbot"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://wingtechbot:wingtechbot_password@postgres:5432/wingtechbot
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - PORT=3000
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      database-init:
        condition: service_completed_successfully

  # Initialize database
  database-init:
    build:
      context: .
      target: build
    volumes:
      - ./prisma:/app/prisma
    environment:
      - DATABASE_URL=postgresql://wingtechbot:wingtechbot_password@postgres:5432/wingtechbot
    command: >
      sh -c "
        pnpm exec prisma generate &&
        pnpm exec prisma db push --accept-data-loss &&
        echo 'Database initialized successfully'
      "
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  # Production-like service for testing
  app-prod:
    build:
      context: .
      target: production
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://wingtechbot:wingtechbot_password@postgres:5432/wingtechbot
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - PORT=3000
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      database-init:
        condition: service_completed_successfully
    profiles:
      - production

volumes:
  node_modules:
  postgres_data:

networks:
  app-network:
    driver: bridge 