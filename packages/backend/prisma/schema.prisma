// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/generated/database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id          String   @id
  name        String
  ownerId     String
  memberCount Int      @default(0)
  prefix      String   @default("!")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members GuildMember[]
  settings GuildSettings?

  @@map("guilds")
}

model User {
  id          String   @id
  username    String
  displayName String?
  avatar      String?
  isBot       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  guildMembers GuildMember[]
  commands     Command[]

  @@map("users")
}

model GuildMember {
  id       String @id @default(cuid())
  userId   String
  guildId  String
  nickname String?
  joinedAt DateTime @default(now())
  roles    String   @default("[]") // JSON array of role IDs
  isActive Boolean  @default(true)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId])
  @@map("guild_members")
}

model Command {
  id          String   @id @default(cuid())
  name        String
  description String?
  guildId     String?
  userId      String
  arguments   String? // JSON serialized arguments
  executedAt  DateTime @default(now())
  success     Boolean
  error       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("commands")
}

model GuildSettings {
  id              String   @id @default(cuid())
  guildId         String   @unique
  welcomeChannel  String?
  logChannel      String?
  modRole         String?
  adminRole       String?
  autoRole        String?
  welcomeMessage  String?
  leaveMessage    String?
  enabledFeatures String   @default("[]") // JSON array of enabled features
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("guild_settings")
}
