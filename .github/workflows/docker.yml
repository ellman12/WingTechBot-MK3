name: Docker Build and Push

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to build'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate Docker Compose for production
        run: |
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.version }}
              environment:
                - NODE_ENV=production
                - DATABASE_URL=\${DATABASE_URL}
                - DISCORD_TOKEN=\${DISCORD_TOKEN}
                - DISCORD_CLIENT_ID=\${DISCORD_CLIENT_ID}
                - DISCORD_GUILD_ID=\${DISCORD_GUILD_ID}
              ports:
                - "3000:3000"
              depends_on:
                - postgres
              restart: unless-stopped
          
            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.version }}
              ports:
                - "80:80"
              depends_on:
                - backend
              restart: unless-stopped
          
            postgres:
              image: postgres:16-alpine
              environment:
                - POSTGRES_DB=\${POSTGRES_DB}
                - POSTGRES_USER=\${POSTGRES_USER}
                - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              restart: unless-stopped
          
          volumes:
            postgres_data:
          EOF

      - name: Upload Docker Compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-prod
          path: docker-compose.prod.yml 